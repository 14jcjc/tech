## [\[R & SQL\] データサイエンス100本ノック＋α - R-029](http://localhost:1313/ds-drills/r-029/)

### 店舗ごとの最頻商品の取得

2025-02-26

**参考記事:**  
[\[R & SQL\] データサイエンス100本ノック＋α - 概要・導入](http://localhost:1313/ds-drills/start/)

*   設問文は [データサイエンス100本ノック（構造化データ加工編）](https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess/tree/master/docker/doc) より引用しています。
*   **全てのコードはコピー＆ペーストで実行できます。**

## 演習問題

難易度

レシート明細データ（receipt）に対し、店舗コード（store\_cd）ごとに商品コード（product\_cd）の最頻値を求め、10件表示させよ。

出力イメージ:

       store_cd product_cd     n
     1 S14027   P060303001   152
     2 S14012   P060303001   142
     3 S14028   P060303001   140
     4 S12030   P060303001   115
     5 S13031   P060303001   115
     6 S12013   P060303001   107
     7 S13044   P060303001    96
     8 S14024   P060303001    96
     9 S12029   P060303001    92
    10 S13004   P060303001    88

Copy

## 実行環境の構築について

R コード実行環境の構築に必要な手順は [こちら](http://localhost:1313/ds-drills/start/#setup) から確認できます。

セットアップが完了すると、必要なパッケージとデータを使用できるようになります。

* * *

最も頻出する商品コードが複数存在する場合、それらを全て抽出する解答例を以下に示します。  
各コードの出力結果を統一させるため、(最頻値の降順, 店舗コードの昇順) でソートしています。

## R (データフレーム操作)

### 利用するデータ

以下のデータを利用します。

*   `df_receipt` の店舗コード (`store_cd`) と商品コード (`product_cd`)

主要なカラムを抜き出してデータの一部を確認します。

R

    df_receipt %>% select(store_cd, product_cd)

Copy

    # A tibble: 104,681 × 2
      store_cd product_cd
      <chr>    <chr>     
    1 S14006   P070305012
    2 S13008   P070701017
    3 S14028   P060101005
    4 S14042   P050301001
    5 S14025   P060102007
    6 S13003   P050102002
    7 S14024   P080101005
    ...

Copy

### 解答例 (1)

#### 解答コードと実行結果

R

    df_receipt %>% 
      count(store_cd, product_cd) %>% 
      filter(n == max(n), .by = store_cd) %>% 
      arrange(desc(n), store_cd) %>% 
      head(10)

Copy

    # A tibble: 10 × 3
       store_cd product_cd     n
       <chr>    <chr>      <int>
     1 S14027   P060303001   152
     2 S14012   P060303001   142
     3 S14028   P060303001   140
     4 S12030   P060303001   115
     5 S13031   P060303001   115
     6 S12013   P060303001   107
     7 S13044   P060303001    96
     8 S14024   P060303001    96
     9 S12029   P060303001    92
    10 S13004   P060303001    88

Copy

#### 解説

*   **`count(store_cd, product_cd)`**  
    `df_receipt` に対し、店舗 (`store_cd`) と商品 (`product_cd`) の組み合わせごとに出現回数 (`n`) を集計します。
*   **`filter(n == max(n), .by = store_cd)`**
    *   各店舗ごとに最頻出の商品を抽出します。
    *   同じ `max(n)` の値を持つ商品が複数ある場合、それらが全て結果に含まれます。
*   **`arrange(desc(n), store_cd)`**  
    `n` の降順で結果を並べ替え、同じ出現回数の店舗については `store_cd` の昇順に並べます。

### 解答例 (2)

#### 解答コードと実行結果

`filter()` の代わりに `slice_max()` を使用した解答例です。

R

    df_receipt %>% 
      count(store_cd, product_cd) %>% 
      slice_max(n, n = 1, with_ties = TRUE, by = store_cd) %>% 
      arrange(desc(n), store_cd) %>% 
      head(10)

Copy

    # A tibble: 10 × 3
       store_cd product_cd     n
       <chr>    <chr>      <int>
     1 S14027   P060303001   152
     2 S14012   P060303001   142
     3 S14028   P060303001   140
     4 S12030   P060303001   115
     5 S13031   P060303001   115
     6 S12013   P060303001   107
     7 S13044   P060303001    96
     8 S14024   P060303001    96
     9 S12029   P060303001    92
    10 S13004   P060303001    88

Copy

#### 解説

*   **`slice_max(n, n = 1, with_ties = TRUE, by = store_cd)`**
    *   各店舗 (`store_cd`) ごとに出現回数 `n` が最大となる商品 (`product_cd`) を抽出します。
    *   `with_ties = TRUE` の指定により、該当する商品が複数ある場合、それらが全て抽出されます。
