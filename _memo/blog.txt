
* grep

rg -i "h6 \{" ./themes/hugo-theme-stack/ -uu
rg -i "@include respond" ./themes/hugo-theme-stack/ -uu

rg -i "@media" ./themes/hugo-theme-stack/assets/scss -uu
rg -i ".toc" ./themes/hugo-theme-stack -uu
rg -i ".Draft" ./themes/hugo-theme-stack/ -uu
rg -i "関連するコンテンツ" ./layouts -uu
rg -i "share_icons" ./layouts -uu
rg -i "article-title" ./layouts -uu

rg -i "PhotoSwipe" ./themes/hugo-theme-stack/ -uu
rg -i "menu" ./themes/hugo-theme-stack/assets/scss -uu

rg -i "share-buttons" ../tech-blog-2/themes/PaperMod/assets/css -uu
rg -i "toc \{" ../tech-blog-2/themes/PaperMod/assets/css -uu

#-------------------------------------------------------------------------------
* tbl() が返すオブジェクト

テーブルを dplyr で参照するオブジェクト: 
データベースのテーブル参照オブジェクト
dplyr のテーブル参照オブジェクト
データベースのテーブル参照
テーブル参照

#-------------------------------------------------------------------------------
* アフィリエイトリンクがあるサイト

https://ken-info.com/datascience-100knocks/
Amazon, 楽天, Yahooショッピング、Google のアフィリエイトリンクあり.

https://jimaru.blog/self-dev/blog-affiliate/
Amazon, 楽天, Yahooショッピングへのアフィリエイトリンクあり.

https://tora3data.com/chatgpt-fukatsu/

https://shiro-no-panda.com/mensa3/

#-------------------------------------------------------------------------------
* ToDo

関連記事

- ブラウザの開発者ツールを活用
  https://bit.ly/42cNeEA

- db_get_query -> db_get_query
- sql_render_ext -> sql_render_ext

- supermarket.duckdb

- GitHub リポジトリの変更、記事内の変更
  アカウント: 14katsumix -> katsu-ds-lab
  リポジトリ: 100knocks-dp -> ds-drills
  ディレクトリ: 100knocks-dp -> ds-drills

- 14katsumix/100knocks-dp を Private にする。

- アカウントの変更、記事内の変更
  ドメイン、GitHub、twitter、gmail

https://katsu-ds-lab.com
katsu-ds-lab
@katsu_ds_lab
katsu.ds.lab@gmail.com

- ディレクトリ名とURLの変更
  - 100knocks -> ds-drills
  - ds100knocks-alpha -> ds-drills

- 「記事」という言葉を使ってOK！（ブログの雰囲気を維持しつつ、有料記事も自然に組み込める）
「有料記事」という表現もそのままでOK（「有料コンテンツ」よりも親しみやすい）
読者が違和感なく無料→有料へ進める導線を意識すると効果的！
Stackテーマはブログ向けなので、「記事」として整理すると違和感がない
ブログ形式なら検索流入を狙いやすい
「関連記事」として他の記事への誘導がスムーズ

自サイト内のリンク → 「関連記事」「Related articles」
有料記事への誘導 → 「この続きを有料記事で解説！」
外部サイトへのリンク → 「参考リンク」

関連ページ
参考ページ
参考資料
参考情報
「詳細は参考記事をご覧ください。」
「詳細については、こちらの参考資料をご確認ください。」
「さらなる情報は、以下のページをご参照ください。」
「関連情報については、こちらの資料をご参照ください。」

- 演習問題の2つを draft にする (?) (アフィリエイト登録対策)

- sitemap.xml の生成を無効にする
disableKinds: 
  - sitemap

- データサイエンス100本ノック＋α
  データフレーム操作とSQLクエリについて、Notebook で動作確認する

- アバター画像の編集

- 各記事に以下を追記する: 
  すべてのコードはコピー＆ペーストでそのまま実行できます。

- 設問文の前に引用先について追記する

- 設問文を実際のものに書き直す

- 設問に「処理後のイメージ」を追加する

- ### 利用するデータ のセクションを追記する
  (データフレーム操作、データベース操作、SQL の各セクションで)

- 各コードの出力結果を統一させるためソートしている、旨を追記

- コードブロックに {name="R"},  {name="SQL"} を付ける (演習問題以外の記事も)

```r {name="R"}
```sql {name="SQL"}

- 目次の改訂
- コードブロックの追加

- free.md を改訂する

- コードを折りたたむ (?)

- 「自動生成された SQL クエリ」セクションは「R (データベース操作)」に記載する (?)

- 解答例(1) → 解答例 (1) など

- 演習問題に、異なるデータベースの SQLクエリを書く問いを追加する (?)
- sql_render_ext() は不必要なら除外する

- q を query に変更する
q = sql()
q %>% db_get_query(con)

- 「カテゴリー」→ 「カテゴリ」に修正する

- サイト名、サブタイトルの変更 (日本語・英語)

- 「データサイエンス100本ノック＋α」でよいか確認する！
  - 「データサイエンス100本ノック＋α」というワードを用いて収益化しても問題ない？

- 英語版を作成する
  - フォント
  - カテゴリ、タグ
  - CSVファイルを作成
  - questions.yaml
  - 英語版のプログラムの作成・公開 (標準・簡易セットアップ)、コメントアウトも英語にする
  - ER図を作成
  - 英語版 twitter, GitHub アカウントを作成する？

- RStudio でセットアップ・プログラム、演習問題の動作チェックをする

- セットアップ・プログラムを push

- サイト名とサブタイトル のフォントサイズ設定

- 有料コンテンツのサンプルを用意する (note, RMarkdown, ...)

- Free の問題の追加は R-101 〜

- tmp-setup.md を改訂する

- 同じ SELECT 内の列を参照している箇所を修正する

- SELECT * の箇所を * を使わない形に修正する

- 設問のタイトル作成

- start#補足 に translate_sql() について追記する

- T, F -> TRUE, FALSE に修正

- ifelse -> if_else に変更する
  if_else() の第3引数 missing を用いる形に修正する

- NULL のときに NULL という冗長表現を修正する : 
  CASE
    WHEN (sales IS NOT NULL) THEN ... OVER (
    )
  END AS ...

- amount が nullable の場合の処理
  nullable（NULL 許容） ⇔ non-nullable（NULL 非許容）
  NULL を許容する ⇔ NULL を許容しない

- 画像の圧縮（WebP 形式を利用）

- ポートフォリオ
http://localhost:1313/tech-blog/portfolio/

- sitemap.xml: 
  - 本番環境で, に draft のページなどが含まれないようにする
  - portfolio
  /content/page/portfolio/index.md はレンダリングしたい。

- privacy を robots.txt などから除外する

- Twitter cards のチェック.

- 左サイドのアイテムが一部 Bold にならない(id="main-menu")

- スマホでのフォントサイズ, リスト, ヘッダーアンカー, H2下線, etc

- permalinks:
- menus:
- /config/
- R で SVG作成
- chroma: sql の PARTITION にカラーがつかない
- robots.txt
- コードブロックについて調べる: 
  + ダークモードのハイライトカラーが悪い
  + chroma を使用してるか？
  + ファイル名を表示する: https://bit.ly/4aAqYan
  + 行のハイライトが右端までいかない. スクロールで途切れる.
- env:
- ダークモードの設定
- ナビゲーション: prev, next
- 演習問題一覧のスタイル
- <pre> のカラー
- <hr>のスタイルを変更する
- ヘッダーのアンカーのロゴを変更する, 右に出す
- ヘッダーのスタイル、lineheight、h2に下線
- フォントの設定: https://bit.ly/42vb3s5
- リストのインデント幅を狭くする (ol, li, ul)
- 目次のインデント幅を狭くする (.widget--toc)
- ショートコードで表示したリンクのスタイルが異なる
  -> href-target-blank.html を改修.
- code, .chroma のフォントサイズ
- コードブロックのコメントのカラーを変更する
- コードブロックのスタイルをカスタマイズ: (ファイル名を付ける)
- コードブロックの半角のフォントが読みずらい（特にスマホで）
- Alerts
- menu の iconイメージ (演習問題など): https://tabler.io/icons
- product-link に 引数: class ("link") を追加する。
- favicon
- アバター画像と、その横に絵文字
- 最終更新 2025-01-24 06:53 JST の確認
- Share ボタン
- tag が Titleケースになってしまう
  -> capitalizeListTitles: false を設定
- [Privacy Policy]({{< ref "privacy" >}})
- ドラフトページにアイコンを出す
- About
- photoswipe
  https://junpei-sugiyama.com/photoswipe/
  shortcodeも！
- スマホ画面に目次をつける
  UseHugoToc = false の場合の修正：
- サイトタイトルとサブタイトルのフォントの設定 (.site-meta { })
- GitHubにカスタムドメインの設定
  https://katsu-ds-lab.com
- categories: "データサイエンス100本ノック＋α" などの編集, 
  /content/categories/*
- データを GitHubリポジトリに公開、簡易版プログラムを修正する
- 簡易セットアップ の R コードを折りたたむ
- tech-blog を変更する (-> tech)
- タグから R, SQL を削除する
- params.yaml の改訂
- 演習問題一覧ページの改訂
- リポジトリ上のCSVファイルの読み込み
- 演習問題タイトル, URL
- カテゴリーを改訂する
- h2, h3 のレイアウト の2つ目を作成する

* href-target-blank の名称を変更

* widgets のタグ数の limit などを設定

* Stack でページの表示が重くなったら検索機能を差し替える
1000記事以上あっても、Algoliaなら瞬時に検索可能。
Hugo の Lunr.js は 100記事を超えると遅くなる傾向があるので、記事数が多いならAlgoliaの方が圧倒的に有利。
PaperModでも同様に使えるので、検索機能を追加したいならAlgoliaが最適解です。

* リンクの前に FontAwesomeのアイコンを表示する
https://chatgpt.com/c/678ef794-3970-8005-8183-b5f17ca3a0ce

* データサイエンス100本ノック＋α の環境構築

データサイエンス100本ノック（構造化データ加工編）を導入済みのユーザー向けについて。

* カスタムドメイン, https

* Google Analytics

G-GLB0HGKER4

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GLB0HGKER4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-GLB0HGKER4');
</script>

* Google Search Console

以下の TXT レコードを 14jcjc.github.io の DNS 設定にコピーします: 

* 書籍のアフィリエイトリンクのデザイン
  カード型、ボタン型リンク
  Hugoのショートコードを活用して、クリックしやすいデザインにする

* 各 platforms のアフィリエイトリンクを出力する shortcodes を作る
  参考: product-link.html

* コンテンツファイルに記述する問題文を data/k100/questions.yaml からゲットする.

* 演習問題一覧ページを「番号順」にする。「難易度順」を作る. 

* 各演習問題のページを作る. 

* robots.txt

公開時は static/robots.txt を削除すること！

* リスト表示とシングル表示の上部にタグを付ける: https://bit.ly/40h5xGs

* 画像を追加した際の注意点

question.svg と review.svg に @ マークが付いています。
これは macOS の「拡張属性 (Extended Attributes)」を示しています。拡張属性が Hugo のビルドを妨げている可能性があるので、削除してみてください。

ls -l assets/icons/

-rw-r--r--   1 kk  staff  418  1 21 21:11 link.svg
-rw-r--r--   1 kk  staff  431  1 21 21:11 messages.svg
-rw-r--r--@  1 kk  staff  537  1 23 05:40 question.svg
-rw-r--r--@  1 kk  staff  454  1 23 05:42 review.svg

xattr -c assets/icons/question.svg assets/icons/review.svg

* {{< shortcode >}} と {{% shortcode %}} の違い
https://gohugo.io/methods/page/rendershortcodes/
PAGE.RenderShortcodes は、コンテンツファイル内のショートコードをレンダリングするが、
Markdown は保持されることに注意。

* partial template
https://gohugo.io/templates/embedded/
ショートコードはテンプレートファイルでは動作しないことに注意してください。ショートコードが提供するようなドロップイン機能が必要な場合、代わりに部分テンプレートが必要です。

* comments 機能
Hugo には、静的および動的 Web サイトの両方で人気のコメント システムであるDisqusの埋め込みテンプレートが含まれています。Disqus を効果的に使用するには、無料サービスにサインアップして Disqus の「短縮名」を取得してください。

埋め込みテンプレートを含めるには:
{{ template "_internal/disqus.html" . }}

* 関連記事の設定 (hugo.yaml, related)

* Cascade
https://gohugo.io/content-management/front-matter/#cascade
どのノードもその子孫にフロントマターの値のセットを渡すことができる。

* Related content (See also)

* Single template, Template selection
https://gohugo.io/content-management/sections/
Hugo has a defined lookup order to determine which template to use when rendering a page. 
content/products/product-1/benefits -> 
  - layouts/products/list.html
  - layouts/products/single.html
If you need to use a different template for a subsection, specify type and/or layout in front matter.

* Build options
https://gohugo.io/content-management/build-options/
headless page など。

* Image processing
https://gohugo.io/content-management/image-processing/
Global resource 
A global resource is a file within the assets directory, or within any directory mounted to the assets directory.

assets/
└── images/
    └── sunset.jpg    <-- global resource

* ref, relref
To link to another language version of a document, use this syntax:
{{< relref path="document.md" lang="ja" >}}

* Shortcodes
{{< href-target-blank url="" text="">}}
{{% comment %}} TODO: rewrite the paragraph below. {{% /comment %}}

-------------------------------------------------------------------------------
section: ディレクトリ単位での分類。
taxonomy: コンテンツ全体に適用できる分類方法(tagsなど).
term: タクソノミーの具体的な分類値。

-------------------------------------------------------------------------------
* Archetypes
https://gohugo.io/content-management/archetypes/
To create an article using the articles archetype: 
hugo new content articles/something.md
チュートリアル アーキタイプを使用して記事を作成するには:
hugo new content --kind tutorials articles/something.md

hugo new content --kind standard ds-drills/standard/r-029.md

-------------------------------------------------------------------------------
* ローカルストレージの確認 (ブラウザ)
ローカルストレージに保存されたデータを確認するには、以下の手順で行います。
- 開発者ツールを開く (F12, 右クリックして「検証」を選択)
- 「Application」タブを選択.
- 「Local Storage」を確認
左のサイドバーに「Local Storage」があります。その中から、現在のサイトのドメインを選択します。
右側に保存されているキーと値が表示されます。
例えば、order や edition の項目がある場合、それらの値が表示される。
- 各項目を削除して動作確認することもできる。

-------------------------------------------------------------------------------
* environment 
(string) Build environment. Default is 
- production when running hugo
- development when running hugo server.

my-project/
└── config/
    ├── _default/
    │   ├── hugo.toml
    │   ├── menus.en.toml
    │   ├── menus.de.toml
    │   └── params.toml
    ├── production/
    │   ├── hugo.toml
    │   └── params.toml
    └── staging/
        ├── hugo.toml
        └── params.toml

https://gohugo.io/getting-started/configuration/

ex) 
params に merge: deep の設定が適用されると、keywords の値は深くマージされます。

_default/params.yaml
keywords: ["aaa", "bbb"]

production/params.yaml 
keywords: ["ccc"]

をマージすると、以下のような結果になります：
keywords:
  - "aaa"
  - "bbb"
  - "ccc"

ただし、foo: "123" のような単純な値の場合、_merge: deep を使っても、ファイルの優先度に基づき、
production/params.yaml が _default/params.yaml を上書きします。

shallow マージでは、設定ファイルが最後に読み込まれたものが優先されます。
keywords: ["ccc"]
のみが適用される。

_merge: none はマージを行わない設定。
同じキーが複数のファイルに存在する場合、最初のファイルに記載された値がそのまま適用されます。
keywords: ["aaa", "bbb"]
のみが適用される。

-------------------------------------------------------------------------------
* Twitter Card を確認する！

https://14katsumix.github.io/tech-blog/ds-100knocks-dp/100knocks-dp-guidebook/
をツイートして Twitter Card を確認する！

content
└── test
| |--xxx
| | |--_index.md
| | |--yyy
| | | |--_index.md
| | | |--yyy1.md
| | | |--yyy2.md

という構成です。

-------------------------------------------------------------------------------
* 定型文のテンプレートをコンテンツに挿入する仕組みを作る.
  -> shortcodes: include を使う。
  参考 (定型文.md はビルド・公開しない): 
  * Build options
  https://gohugo.io/content-management/build-options/
  ---
  cascade:
  - _target:
      environment: production
    build:
      list: never
      render: never
  title: Internal
  ---

以下を参考に: 
https://gohugo.io/methods/page/rendershortcodes/

content/about.md
{{% include "/snippets/services" %}}
{{% include "/snippets/values" %}}
{{% include "/snippets/leadership" %}}

- ショートコードを含む Markdown ファイルを作成: 
content/base.md:
```
## 定型文
このテキストは定型文です。
{{< example_shortcode param="外部データ" >}}
```

- 部分テンプレートで readFile と renderString を使う: 
readFile で外部ファイルを読み込み、RenderString を使ってショートコードをレンダリングします。
layouts/partials/base.html: 
```
{{ $content := readFile "content/base.md" }}
{{ $rendered := $content | .Page.RenderString }}
{{ $rendered | safeHTML }}
```

param引数を受け取る場合は分岐処理で "content/base.md" を動的に定義できる。

- ショートコードを作成して部分テンプレートを呼び出す
layouts/shortcodes/base.html を作成し、その中で layouts/partials/base.html を呼び出します。
layouts/shortcodes/base.html: 
```
{{ partial "base.html" . }}
```
param引数を与えたい場合: 
```
{{ partial "base.html" (dict "context" . "param" (.Get "param")) }}
```
param という引数をショートコードから受け取ります。
context は現在のページ（.Page）や渡されたスコープです。

- コンテンツ内でショートコードを呼び出す

content/posts/my-post.md: 
```
## 記事タイトル

本文の前に定型文を挿入します。

{{< base >}}
or
{{< base param="..." >}}

ここに記事の続きを記述します。
```

この方法により、layouts/partials/base.html の内容が記事内に挿入されます。

-------------------------------------------------------------------------------
* iPhone でのメニューの問題

Hugo + GitHub Actions で作成した公開サイトを作成しました。
テーマはPaperModを利用してます。
サイトのリンク構成は全てうまくデプロイされてます。
メニューは全てブラウザで開ます。
macbookでは問題はありません。
しかし、iPhone で Home や メニューを何度かクリックすると、
メニューの tags, categories, Archives などが読み込めなくなる現象が発生してます。
原因は？

iPhone だと、メニューが開けるときもありますが、
クリック後、いつまで経ってもページが開かない、という現象が起きます。
Chromeのシークレットウィンドウで開いたらきちんと動作した。

-------------------------------------------------------------------------------
* twitter で投稿をシェアしても、タイトルしか表示されない

[params]
cacheBusting = true
disableLazyLoading = true

タイトル: 「ブログ記事タイトル」
説明文: 「記事の説明」
画像: 記事のサムネイル
アカウント: @YourTwitterHandle（あなたのアカウント）

の全てがサイトのmetaデータに含まれてるのに、
ツイッターで投稿をシェアしても、タイトルしか表示されない。

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@YourTwitterHandle">
<meta name="twitter:title" content="ブログ記事タイトル">
<meta name="twitter:description" content="記事の説明">
<meta name="twitter:image" content="記事のサムネイルURL">
は全て記述されてます。

-------------------------------------------------------------------------------
イントロダクション（全体の導入として）
概要・準備（シンプルに要点を表す）
セットアップガイド（環境設定を強調）
基礎知識（Tips も含めた基礎的な情報を伝えるイメージ）

はじめに
概要・準備
導入
環境構築
ガイドライン
セットアップ
準備とポイント
基礎知識
スタートガイド

-------------------------------------------------------------------------------

「データサイエンス100本ノック～構造化データ加工編ガイドブック」のレビューをブログに書きたい。
以下の条件でサンプルを書いてください。
- フォーマット: Markdown
- 「長年RとSQLを活用してる自分でも成長できた」旨を含める。
- このブログで演習問題の解説とサンプルコードを執筆するので、その記事にスムーズに繋がるような内容とする。

-------------------------------------------------------------------------------

『**{{< product-name "ds100kdp" >}}**』
{{< param k100.dss.name >}} が公開している {{< k100/ds100kdp-link >}} の解説本で
データサイエンスのスキルを実践的に学ぶことができる『データサイエンス100本ノック～構造化データ加工編』。
この解説ガイドブックとして発売されたのが『データサイエンス100本ノック～構造化データ加工編ガイドブック』です。
データ分析の基礎力を養うために
データを加工・分析する力を鍛えるための一冊となってます。

各問題には、3言語での実装例と解説が掲載されており、言語ごとの得手・不得手を理解しながら学習を進めることができます。

本書により、データのクレンジングや変換処理など、実務で必要なデータ加工スキルを体系的に学ぶことができました。

-------------------------------------------------------------------------------

以下のブログ記事をブラッシュアップして。

#-------------------------------------------------------------------------------

以下のブログ記事の日本語の説明文を修正して

#-------------------------------------------------------------------------------

制作中のブログサイトが、Google Chrome で 突然レイアウトがおかしくなった。
HTMLの見出しタグや<li>タグのレイアウトが突然おかしくなった。
Safari やスマホでは問題ない。
原因は？

Chat to Notion 2.0.0
(ChatGPT、Deepseek、Claude、Mistral との会話を直接 Notion に保存できます！)
の拡張機能が原因でした！

ということは、Chat to Notion 2.0.0を利用しているユーザー環境では、スタイルが乱れることになる？

